Json

JavaScript Object Notation (JSON) é um formato de ofrnazação de dados, compostos por um conjunto de chave e valor. As aspas DUPLAS são obrigatórias, tatno na chave quanto no valor quando este for uma string
{
  "id": 1,
  "nome": "Andre",
  "e-mail": "andreorigamid@gmail.com"
}

JSON.parse() -> irá transformar um texto JSON em um objeto JavaScript.

JSON.stringify() -> Irá trnasformar um objeto JavaScript em uma string no formato JSON.

API e HTTP 

async -> indica que a função possui partes assincronas e que voce pretende esperar a resolução da mesma antes de continuar.

await -> irá indicar a promise que devemos esperar.

async function puxarDados() {
  const dadosResponse = await fetch('./dados.json');
  const dadosJSON = await dadosResponse.json();

  document.body.innerText = dadosJSON.titulo;
}

puxarDados();

Diferença de then/async é uma sintaxe mais limpa


Try / Catch 
Para lidarmos com erros nas promises, podemos utilizar o try e o catch na função
async function puxarDados() {
  try {
  const dadosResponse = await fetch('./dados.json');
  const dadosJSON = await dadosResponse.json();
  document.body.innerText = dadosJSON.titulo;
  }
  catch(erro) {
     console.log(erro);
  }
}

puxarDados();


History API

É possivel acessarmos o histórico de acesso do browser em uma sessão especifica aráves do window.history. O objeto possui diferentes métodos e propriedades

window.history.back volta uma
window.history.forward vai pra proxima

window.history.pushState(null, null, 'teste.html');

popstate()

Fetch e History
Ao puxarmos dados via fetch api, o url da página continua o mesmo. Ao combinar fetch com a history api conseguimos simular uma navegação real entre página, sem a necessidade de recarregamento da mesma.

exemplo

async function fetchPage(url) {
  const pageResponse = await fetch(url);
  const pageText = await pageResponse.text();
  window.history.pushState(null, null, url);
}
