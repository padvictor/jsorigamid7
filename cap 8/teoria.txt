Cap 8
Function Expression

Function Declaration
São duas as formas mais comuns de declarearmos uma função. A que utilizamos até o momento é chamado de Function Declaration

Function Expression
É criada a partir da declaração de uma variável, na qual assinalamos uma função. Esta função pode ser anônima ou nomeada. A mesma poderá ser ativada atráves da variável assinalada

const somar = function(a,b) {
  return a + b;
}

Mais comun utilizando arrow Functions

const somar (a,b) => a + b;

Factory Function 
São funções que retornam um objeto sem a necessidade de utilizrmos a palavra chave new. Possuem basicamente a mesma função que constuctor functions / classes.

Ice Factory 
Podemos impedir que os métodos e propriedades sejam modificados com Object.freeze().


Clojures e Debugging
Escopo 
Quando criamos uma função, a mesma possui acesso à todas as variváveis criadas em seu escopo e também ao escopo do pai. A mesma coisa acontece para funções dentro de funções.

Destructuring
Permite a desestruturação de Arrays e Objetos. Atribuindo suas propriedades á novas variáveis.

exemplo

const carro = {
  marca: 'Fiat',
  ano: 2018,
  portas: 4,
}

const {marca, ano} = carro;

Destructuring Objects
A desestruturação irá facilitar a manipulação de dados. Principalmente quando temos uma grande progundidade de objetos.

Sempre definir o nome da variavél como o nome do objeto.

Argumento Desestruturado
Se uma função espera receber como argumento um objeto, podemos desestruturar ele no momento da declaração.

Rest e Spread
Parâmetros
Nem todos os parâmetros que definimos são utilizados quando um função é executada, devido a falta de argumentos. Por isso é importante nos prepararmos para caso estes argumentos não sejam declarados.

|| lembrando que isto significa OU 

ARGUMENTS -> a palavra chave arguments é um objeto Array-like criado dentro da função. Esse objeto contém os valores dos argumentos.

Parâmetro Rest
É possível declararmos um parâmetro utilizando ... na frente do mesmo. Assim todos os argumentos que passarmos na ativação da função, ficarão no parâmetro.

Operador Spread
Assim como o rest, o operador Spread também utiliza os ... para ser ativado. O spread irá distribuir um itme iterável, um por um.

Spread Argument 
O Spread pode ser muito útil para funções que recebem uma lista de argumentos ao invés de uma array.

Loops e Iterable
Iterable
São objetos que possuem o método [Symbol.iterator], geralmente no protótipo, é dentro dele que a função que lida com a iteração será definida. Ex:Array, String, NodeList, boa parte de arrays-like  outros

for..of
É possivel fazermos um loop por cada iteração do objeto iterável utilizando o for...of. Além deste looop podemos também utilizar o Spread Operator nos mesmos.

for..in
Este loop irá retornar a chave (key) de todas as propriedades enumeráveis (que não sejam simbolos) de um objeto.

